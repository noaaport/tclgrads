#
# $Id: tclgrads.wiki,v b80113343627 2012/03/23 01:08:34 nieves $
#
#  http://opengrads.org/wiki/index.php?title=TCL_Interface_to_GrADS

{{rightTOC}}

Tclgrads is a library of procedures for executing commands in GrADS
from a Tcl script. It uses the facilities of the Tcl language to
send commands to GrADS and parse its output, making available
the extensive processing capabilities of [http://www.tcl.tk Tcl] to
manipulate the results of the commands. In this sense,
this interface is analaogous to the
[[Python_Interface_to_GrADS|Python]] and [[Perl_Interface_to_GrADS|Perl]]
interface to GrADS.

=== Requirements ===
Tclgrads requires [http://www.tcl.tk/software/tcllib Tcllib],
and [http://grads.iges.org/grads GrADS] (Version 1.9.0 or later) or
any OpenGRADS release.

=== Downloading the software ===
The source ''tclgrads-<version>.tgz'' of the Tclgrads library can
be downloaded from the OpenGrADS 
[http://sourceforge.net/project/showfiles.php?group_id=161773 download]
area at SourceForge.
The distribution comes with an INSTALL file that contains
the installation instructions, a set of examples to illustrate the
basic functionality, and with a README file that list the available
procedures and their usage.

In addition there are binary packages for FreeBSD and CentOS,
in tbz and rpm formats respectively, that can be installed
with the native package management tools (e.g., rpm, pkg_add).

=== Installation ===

==== Requirements ====

The following are required and must be installed:

    Expect
    Tcllib

==== Installing from Packages ====

Binary packages exist for FreeBSD (tbz) and CentOS (rpm). Since tclgrads
is written entirely in Tcl and no compilation is involved, the rpm
packages should work anywhere rpm is the package management tool.

The packages, available from the SourceForge
[http://sourceforge.net/project/showfiles.php?group_id=161773 download] area
or the software section at [http://www.noaaport.net noaaport.net],
can be installed with the native package management tools (e.g., rpm, pkg_add):

	rpm -i tclgrads-<version>.rpm
	pkg_add tclgrads-<version>.tbz

==== Installation using the Makefile ====

This boils down to executing

	./configure.sh
	make install-dirs
	make install

inside the tclgrads distribution directory.

==== Manual installation ====

Tclgrads is written entirely in Tcl, so there is no compilation
involved. The package consists of a single file ``grads.tcl''
and the accompanying index file ``pkgIndex.tcl''.

Perhaps the best option is to create a directory ``tclgrads'' at the same
as the tcllib directory, and put both of the above files in that
directory.

The files can be saved anywhere, for example

	/usr/local/lib/tcl_site

Any script that will use the package can then add the line

	lappend auto_path "/usr/local/lib/tcl_site"

before the ``package require grads'' and it will be found.

=== Usage ===

A script will typically be of the form

<code>
	#!/usr/local/bin/tlsh8.4

	package require tclgrads;

	::grads::init;
	::grads::open ''filename'';

	''tcl commands''

	::grads::end;
</code>

where ''filename'' stands for a data file that GrADS knows how to read,
and ''tcl commands'' for the set of Tcl commands that form the core
of the script.
The complete set of procedures contained in the package are listed
and described in the README file mentioned above, and here we mention
a few, taken from the examples that are provided with the distribution
and the packages.

=== Examples ===

==== Example 1 ====

Printing a contour plot of ''tmpprs''
<code>
grads::exec d tmpprs;
grads::exec printim "tmpprs.png";
</code>

or a color filles plot instead

<code>
grads::exec set gxout shaded;
grads::exec d tmpprs;
grads::exec printim "tmpprs.png";
</code>

==== Example 2 ====

Transforming variables

<code>
set lon -125;
set lat 37;

grads::transform w2gr $lon $lat gx gy;
puts "$gx $gy";

grads::transform gr2xy $gx $gy x y;
puts "$x $y";

grads::transform xy2w $x $y lon lat;
puts "$lon $lat";
</code>

==== Example 3 ====

Getting the list of variable names

<code>
grads::get_vars vars;
foreach v $vars {
    puts $v;
}
</code>

==== Example 4 ====

Get and output all the levels

<code>
grads::get_levels levels;
foreach l $levels {
    puts $l;
}
</code>

Only the currently set level

<code>
grads::get_levels levels -r;
foreach l $levels {
    puts $l;
}
</code>

Set a range and output the levels in that range

<code>
grads::exec set z 1 10;
grads::get_levels levels -r;
foreach l $levels {
    puts $l;
}
</code>

==== Example 5 ====

This function can set various variables in one call

<code>
gradsu::mset x 10 y 10 t "1 3";
</code>

Using eval_expr1 returns the list (in t) of values of tmpprs for the above
range. The list of values starts with the index 0.

<code>
set tmpprs [grads::eval_expr1 tmpprs t];
foreach t $tmpprs {
    puts $t;
}
</code>

This function is similar, but the first element of $t is the number of items
while the first value of tmpprs starts at the index 1. In addition the result
is saved in the last argument, passed by name.

<code>
gradsu::getval1 tmpprs t result;
foreach t $result {
    puts $t;
}
</code>

==== Example 6 ====

<code>
grads::init;
grads::open "yq";;
</code>

Set the range in the xy plane

<code>
grads::exec set x 10 14;
grads::exec set y 11 15;
</code>

Evaluate the "tmpprs" variable at each point and print the matrix.
The first commented line will store in the matrix the lon/lat coordinates
along with the value of the variable at each point.
The second commented line will store in the matrix the xy wind components
along with the tmpprs at each point. 

<code>
set m [grads::eval_expr_xy "tmpprs" -r];
# set m [grads::eval_expr_xy "lon|lat|tmpprs" -r];
# set m [grads::eval_expr_xy "tmpprs|ugrdprs|vgrdprs" -r];
</code>

$m is now a matrix object that can be manipulated with the
functions from the struct::matrix package of the tcllib.

<code>
puts [$m columns];
puts [$m rows];
set i 0;
while {$i < [$m rows]} {
    set row [$m get row $i];
    foreach j $row {
	puts -nonewline "$j ";
    }
    puts "";
    incr i;
}
</code>
